<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title></title>
      <link href="/2019/02/04/%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD%EF%BC%88%E6%87%92%E5%8A%A0%E8%BD%BD%EF%BC%89--%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/02/04/%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD%EF%BC%88%E6%87%92%E5%8A%A0%E8%BD%BD%EF%BC%89--%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<hr><p>title:Java延迟加载（懒加载）—单例模式</p><h2 id="tags：延迟加载"><a href="#tags：延迟加载" class="headerlink" title="tags：延迟加载"></a>tags：延迟加载</h2><h1 id="延迟加载"><a href="#延迟加载" class="headerlink" title="延迟加载"></a>延迟加载</h1><p>​    延迟加载（LazyLoad），也称为懒加载，顾名思义，因为比较“懒”，所以只有使用的时候才会加载，其主要表达思想为：把对象的创建延迟到使用的时候创建，而不是对象实例化的时候创建。</p><p>​    <strong>作用：</strong>减少内存消耗，增强程序性能，优化内存的使用率。</p><p>​    <strong>例如：</strong>一个程序需要创建一个对象的时候，他的子对象开销比较大且多，在程序中用不到某些子对象，如果都在实例化的时候创建，那么这些没用的对象就占用了内存空间，使真正使用这些内存的对象用不上，导致程序性能降低，那么如果将这些对象都延迟加载，即使用的时候创建，就能提高程序的性能，使资源都用上，尽量减少资源浪费。<br><a id="more"></a></p><h2 id="代码例子（以单例模式为例）"><a href="#代码例子（以单例模式为例）" class="headerlink" title="代码例子（以单例模式为例）"></a>代码例子（以单例模式为例）</h2><p>实例一（单线程）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonLazyLoad</span></span>&#123;</span><br><span class="line">    <span class="comment">//静态私有的成员变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonLazyLoad instance = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//私有构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonLazyLoad</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonLazyLoad <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance==<span class="keyword">null</span>)&#123;</span><br><span class="line">            instance==<span class="keyword">new</span> SingletonLazyLoad();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问题：上述例子这么写存在一个问题，当多个线程进行访问此方法时，如果instance为null，那么每个线程都会创建一个SingletonLazyLoad对象，即线程不安全。如果是单线程情况下，可以按照上述写法。</p><p>实例二（线程安全）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonLazyLoad</span></span>&#123;</span><br><span class="line">    <span class="comment">//静态私有的成员变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> SingletonLazyLoad instance = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//私有构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonLazyLoad</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonLazyLoad <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(SingletonLazyLoad.class)&#123;</span><br><span class="line">            <span class="keyword">if</span>(instance==<span class="keyword">null</span>)&#123;</span><br><span class="line">                instance==<span class="keyword">new</span> SingletonLazyLoad();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问题：上述这种写法虽然可以解决线程安全问题，但是效率低下，因为每次调用getInstance（）的时候，都会在synchronized加锁的SingletonLazyLoad类进行排队，而真正要创建该类的情况总比等待的少，导致效率低下。</p><p>实例三（兼顾效率与线程安全）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonLazyLoad</span></span>&#123;</span><br><span class="line">    <span class="comment">//静态私有的成员变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> SingletonLazyLoad instance = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//私有构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonLazyLoad</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonLazyLoad <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(SingletonLazyLoad.class)&#123;</span><br><span class="line">                <span class="keyword">if</span>(instance==<span class="keyword">null</span>)&#123;</span><br><span class="line">                    instance==<span class="keyword">new</span> SingletonLazyLoad();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    上述的实例三为，双重锁定检查，因为程序在执行的时候，绝大多数都是可以并行操作的，因此在synchronized上再进行一次instance==null的判断，可以减少加锁操作，提高效率。</p><p>实例四（饿汉）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonLazyLoad</span></span>&#123;</span><br><span class="line">    <span class="comment">//静态私有的成员变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonLazyLoad instance = <span class="keyword">new</span> SingletonLazyLoad();</span><br><span class="line">    <span class="comment">//私有构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonLazyLoad</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonLazyLoad <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问题：该写法，保证了在第一次加载的时候实例被初始化，且保证了线程安全。但不能做到延迟加载。</p><p>实例五（静态内部类）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonLazyLoad</span></span>&#123;</span><br><span class="line">    <span class="comment">//私有构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonLazyLoad</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="comment">//私有静态内部类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonLazyLoadHolder</span></span>&#123;</span><br><span class="line">        <span class="keyword">static</span> SingletonLazyLoad instance=<span class="keyword">new</span> SingletonLazyLoad();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonLazyLoad <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonLazyLoadHolder.instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    SingletonLazyLoad类里面有一个静态内部类SingletonLazyLoadHolder，内部类在外部加载的时候不会加载，在调用getInstance才会加载，这样就避免了静态实例instance在类SingletonLazyLoad加载的时候创建对象，并且静态内部类只会加载一次，因此也是线程安全的。</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Java多线程编程核心技术</title>
      <link href="/2018/11/27/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/"/>
      <url>/2018/11/27/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="Java多线程编程核心技术"><a href="#Java多线程编程核心技术" class="headerlink" title="Java多线程编程核心技术"></a>Java多线程编程核心技术</h1><p>​    学习自GitBook的课程（徐刘根——Java多线程编程核心技术），为自己做一个学习内容的复习，也方便以后回顾，本文以问题的形式来学习多线程。<br>课程地址：</p><blockquote><p><a href="https://gitbook.cn/gitchat/column/5a24fb14e3a13b7fc5933a44#catalog" target="_blank" rel="noopener">https://gitbook.cn/gitchat/column/5a24fb14e3a13b7fc5933a44#catalog</a></p></blockquote><a id="more"></a><h2 id="进程与线程的概念"><a href="#进程与线程的概念" class="headerlink" title="进程与线程的概念"></a>进程与线程的概念</h2><p>​    <strong>进程：</strong>操作系统资源分配的基本单位，是程序的实体表现，是一次执行活动。</p><p>​    <strong>线程：</strong>任务调度和执行的基本单位，是程序执行流的最小单元，在单个程序中同时运行的多个线程完成不同的工作，称为多线程。</p><h2 id="进程与线程的关系"><a href="#进程与线程的关系" class="headerlink" title="进程与线程的关系"></a>进程与线程的关系</h2><p><img src="https://bmob-cdn-22543.b0.upaiyun.com/2018/11/27/5ef160c340a67d9f80fe28f3c8f77d19.png" alt="进程与线程的关系图"></p><p>​    进程是程序的实体表现，是程序在内存中的一次执行活动。线程属于进程，一个进程有多个线程。</p><h2 id="进程与线程的优缺点"><a href="#进程与线程的优缺点" class="headerlink" title="进程与线程的优缺点"></a>进程与线程的优缺点</h2><ol><li><p>进程是资源分配的最小单元，线程是程序执行的最小单元。</p></li><li><p>每个进程都有自己的地址空间，线程共享进程中的数据，切换一个线程比进程开销小，创建一个线程也比进程开销小。</p></li><li><p>多进程程序健壮，一个进程死掉，其他进程没有影响。多线程程序只要有一个线程死掉，这个进程就死掉，因为每个进程都有自己的独立空间。</p></li></ol><h2 id="同步与异步（区别与对象锁的同步与异步）"><a href="#同步与异步（区别与对象锁的同步与异步）" class="headerlink" title="同步与异步（区别与对象锁的同步与异步）"></a>同步与异步（区别与对象锁的同步与异步）</h2><p>​    <strong>同步：</strong>对于一个方法，方法一旦调用，后续的方法必须等待此方法调用返回，调用者才可以调用后续的方法。</p><p>​    <strong>异步：</strong>对于一个方法，方法一旦调用，就马上返回，调用者可以调用后续的方法。</p><p>​    <strong>对象锁的同步：</strong>同步即共享，用于有共享资源的对象，没有共享资源也就没必要使用同步。例：A线程在使用A对象的资源，B线程就需要等待A线程的使用完成。</p><p>​    <strong>对象锁的异步：</strong>异步即独立，用于互不影响的对象资源，即没有共享资源。</p><p>​    注：对象锁的同步与异步下面再详细例子介绍。</p><h2 id="并发与并行"><a href="#并发与并行" class="headerlink" title="并发与并行"></a>并发与并行</h2><p>​    两者都可表示为在同一时间范围内有两个或多个任务在同时执行，但在任务调度的时候还是有些小区别的。</p><p>​    <strong>并发：</strong>两个任务的cpu资源分配是交互进行的，时间很短，让人感觉是同时在运行。</p><p>​    <strong>并行：</strong>两个任务真正意义上的同时运行。</p><p>​    并发：</p><p><img src="https://bmob-cdn-22543.b0.upaiyun.com/2018/11/27/daa0ae744050644580641984470c39b6.png" alt="并发"></p><p>​    并行：</p><p><img src="https://bmob-cdn-22543.b0.upaiyun.com/2018/11/27/7e59198340ef467980c6d54b23f9c192.png" alt="并行"></p><h2 id="线程启动方式-Thread与Runnable区别"><a href="#线程启动方式-Thread与Runnable区别" class="headerlink" title="线程启动方式(Thread与Runnable区别)"></a>线程启动方式(Thread与Runnable区别)</h2><p>###Thread</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">System.out.println(<span class="keyword">this</span>.currentThread().getName());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">ThreadTest threadTest=<span class="keyword">new</span> ThreadTest();</span><br><span class="line">        threadTest.setName(<span class="string">"t1"</span>);</span><br><span class="line">threadTest.start();</span><br><span class="line"><span class="comment">//threadTest.run();</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">运行结果：t1</span><br><span class="line">t1</span><br><span class="line">t1</span><br><span class="line">……</span><br><span class="line">若使用threadTest.run();</span><br><span class="line">运行结果：main</span><br><span class="line">main</span><br><span class="line">main</span><br><span class="line">……</span><br></pre></td></tr></table></figure><p>###Runnable</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableTest</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"123"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">RunnableTest runnableTest=<span class="keyword">new</span> RunnableTest();</span><br><span class="line">Thread thread=<span class="keyword">new</span> Thread(runnableTest,<span class="string">"t1"</span>);</span><br><span class="line">thread.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">运行结果：<span class="number">123</span></span><br></pre></td></tr></table></figure><p>注：两者之间区别不大，Thread是类，Runnable是接口，实现了Thread类，通常建议使用Runnable接口，因为一个类可以实现多个接口，只能继承一个类。重写的run方法即为这个线程要执行的方法，开启线程的方法为start(),如果用run()的话仅仅是一个类方法的执行，并不是线程。</p><h2 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h2><p>​    多个线程执行一个对象（类，方法）时，该对象总能表现出<strong>正确的结果</strong>。</p><p>​    <strong>线程不安全的例子：</strong>做一个银行存钱取钱的任务，一个线程执行了存钱的任务，此时共享资源还没把存的钱数目加上去，另一个线程执行了取钱的操作（钱不够），按理来说应该是可以取出钱的，但是却显示了余额不足，即数据脏读。</p><p>​    那么如何解决上诉线程不安全的问题：即采用对象加锁的机制，线程安全即多线程的情况下，采用加锁机制，来防止数据的脏读等问题，当一个任务加上了锁，一个线程访问该锁的数据时，另一个线程不能访问，当这个线程调用结束返回时，释放了锁，另一个线程才可以使用此资源，这样的话就不会出现数据不一致，数据被污染等情况，常见的加锁机制为：Sychronized。</p><h2 id="Synchronized修饰符"><a href="#Synchronized修饰符" class="headerlink" title="Synchronized修饰符"></a>Synchronized修饰符</h2><p>​    在一个类（对象，方法）加上Synchronized修饰符，即表示为此类加上锁，加锁的这片区域称为互斥区或临界区，当多个线程访问Synchronized修饰的run方法时，那么多线程就会以排队的方式使用加锁的区域。</p><p>###一个线程一把锁，多个线程多个锁</p><p>​    对这句话，我的理解是，对于一个对象的资源，若没有表示它为共享的（即static修饰符），那么每个线程对该对象的同一资源的调用就是独立的，因为每个线程都获取了这个对象的锁，不会影响。</p><p>​    例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestA</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> num=<span class="number">100</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(String tag)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tag==”a”)&#123;</span><br><span class="line">num=num+<span class="number">100</span>;</span><br><span class="line">System.out.println(num);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">num=num-<span class="number">100</span>;</span><br><span class="line">System.out.println(num);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">TestA t1=<span class="keyword">new</span> TestA();</span><br><span class="line">TeatA t2=<span class="keyword">new</span> TestA();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">t1.test(“a”);</span><br><span class="line">&#125;</span><br><span class="line">&#125;,”test1”).start();</span><br><span class="line"></span><br><span class="line"> <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">t2.test(“b”);</span><br><span class="line">&#125;</span><br><span class="line">&#125;,”test2”).start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">运行结果：<span class="number">200</span>与<span class="number">0</span>（因为线程获得的不同对象的不同锁，因此互不影响）</span><br><span class="line">若在test方法加上<span class="keyword">static</span>,运行结果为：<span class="number">200</span>与<span class="number">100</span>（因为线程获得的是不同对象的同一个锁，因此资源共享）</span><br></pre></td></tr></table></figure><p>###对象锁的同步与异步</p><p>对象锁异步的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyObject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> MyObject myObject = <span class="keyword">new</span> MyObject();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                myObject.method();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"t1"</span>);</span><br><span class="line"></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                myObject.method();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"t2"</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    对象锁的同步很好理解，即有共享资源的情况下，加锁，上面很多例子都可以看得出来，异步看上面这个代码，发现MyObject的方法method仅仅为一个输出语句，并没有可供t1与t2线程操作的数据，因此无共享的数据，互相线程间调用同一对象的方法不影响。</p><p>###Synchronized锁重入</p><p>​    <strong>锁重入：</strong>即当前线程正在调用某个对象的锁的时候，在该锁里再次请求锁，可以再次得到该对象的锁。如果没有重入锁的机制，当前线程已经获得当前对象的锁，还未释放，又去获取当前对象的锁，就出会现死锁，即当前对象已经有线程在调用了，其他线程就无法获取该对象的锁，在该对象的锁内的线程再次获取该对象的锁，无法获取，就导致一直等待，出现死循环，导致死锁。</p><p>​    注：引入锁重入主要是为了解决死锁问题，作用自然也是避免死锁。</p><h2 id="ThreadLocal概念"><a href="#ThreadLocal概念" class="headerlink" title="ThreadLocal概念"></a>ThreadLocal概念</h2><p>​    <strong>ThreadLocal：</strong>Static为全部线程使用同一资源，ThreadLocal即局部共享，ThreadLocal为每个线程创建一个副本，存放资源，线程之间的同一个资源互不影响，每个线程访问的同一个资源都为自己所设置的值。</p><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalDemo</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;List&lt;String&gt;&gt; threadLocal=<span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getThreadLocal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName());</span><br><span class="line">threadLocal.get().forEach(name-&gt;System.out.println(name));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setThreadLocal</span><span class="params">(List&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">threadLocal.set(list);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">ThreadLocalDemo threadLocalDemo=<span class="keyword">new</span> ThreadLocalDemo();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">List&lt;String&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="string">"aaa"</span>);</span><br><span class="line">list.add(<span class="string">"bbb"</span>);</span><br><span class="line">threadLocalDemo.setThreadLocal(list);</span><br><span class="line">threadLocalDemo.getThreadLocal();</span><br><span class="line">&#125;</span><br><span class="line">&#125;,<span class="string">"t1"</span>).start();;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">List&lt;String&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="string">"111"</span>);</span><br><span class="line">list.add(<span class="string">"222"</span>);</span><br><span class="line">threadLocalDemo.setThreadLocal(list);</span><br><span class="line">threadLocalDemo.getThreadLocal();</span><br><span class="line">&#125;</span><br><span class="line">&#125;,<span class="string">"t2"</span>).start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">结果为：</span><br><span class="line">t1</span><br><span class="line">aaa</span><br><span class="line">bbb</span><br><span class="line">t2</span><br><span class="line"><span class="number">111</span></span><br><span class="line"><span class="number">222</span></span><br></pre></td></tr></table></figure><p>​    通过以上的例子可以看到，不同线程对同一对象有不同的值。</p><h2 id="ThreadLocal与Synchronized同步机制的比较"><a href="#ThreadLocal与Synchronized同步机制的比较" class="headerlink" title="ThreadLocal与Synchronized同步机制的比较"></a>ThreadLocal与Synchronized同步机制的比较</h2><p>​    <strong>Synchronized：</strong>为对象加上锁的机制，保证同一时间只有一个线程访问，多线程共享这个资源，使用此方法需要考虑什么时候要加锁，什么时候读写，什么时候释放锁等问题，程序编写难度较大。</p><p>​    <strong>ThreadLocal：</strong>没有加锁机制，即每个线程虽然使用的资源是同一个，但是在每个线程之间创建了各自的副本，因此使各自线程的资源相互独立，即以空间换时间，来保证线程安全。</p><h2 id="线程间的通信机制（wait-notify）"><a href="#线程间的通信机制（wait-notify）" class="headerlink" title="线程间的通信机制（wait/notify）"></a>线程间的通信机制（wait/notify）</h2><p>​    <strong>线程之间的通信：</strong>wait/notify都需要在Synchronized中使用，例如：A线程正在使用某对象的锁，B线程所处的对象的锁需要根据A线程做出反应，就需要使用wait（）来等待A线程做出通知，就可以使用notify（）来唤醒B线程来完成B的任务。</p><p>​    <strong>例子：</strong>我们去银行办业务，进门之后取票号，等叫到号码的时候会广播通知我们办业务一样，这就是很实际的一个场景，我们取了票号就需要等待，等业务员轮到票号的时候就会广播通知。</p><p>​    <strong>Wait：</strong>使当前执行代码的线程进入等待状态，在当前停止，直到接到通知或者中断，wait（）是释放锁的，即在执行wait（）方法后，当前线程就退出该锁。</p><p>​    <strong>Notify：</strong>唤醒处于等待该对象的对象锁的线程（一个），当前线程执行notify后不会立即释放锁，而是执行完成该锁之后才会释放锁，被通知的线程也不会立即得到对象锁，而是等notify方法执行完成后，释放了该锁，才可以获得该对象锁，notifyAll()唤醒全部等待的线程。</p><h2 id="阻塞队列"><a href="#阻塞队列" class="headerlink" title="阻塞队列"></a>阻塞队列</h2><p>​    阻塞队列（BlockingQueue），即有最大值与最小值限制的队列。（在多线程领域：所谓阻塞，在某些情况下会挂起线程（即阻塞），一旦条件满足，被挂起的线程又会自动被唤醒）</p><h2 id="Lock对象"><a href="#Lock对象" class="headerlink" title="Lock对象"></a>Lock对象</h2><p>​    Lock是一个接口，常用的实现类为ReentrantLock，与Synchronized的加锁机制类似，可以实现线程间的同步互斥，并在此基础上扩展了比较多的功能功能过，更为灵活。</p><h3 id="使用ReentrantLock对象实现线程同步"><a href="#使用ReentrantLock对象实现线程同步" class="headerlink" title="使用ReentrantLock对象实现线程同步"></a>使用ReentrantLock对象实现线程同步</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LockDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(Lock lock)</span> </span>&#123;</span><br><span class="line">lock.lock();</span><br><span class="line">System.out.println(<span class="string">"加锁，只允许一个线程访问"</span>);</span><br><span class="line">lock.unlock();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">ReentrantLock lock=<span class="keyword">new</span> ReentrantLock();</span><br><span class="line">LockDemo lockDemo=<span class="keyword">new</span> LockDemo();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">lockDemo.test(lock);</span><br><span class="line">&#125;,<span class="string">"t1"</span>).start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">lockDemo.test(lock);</span><br><span class="line">&#125;,<span class="string">"t2"</span>).start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    注：lock采用lock（）与unlock（）来锁定需要加锁的代码块。</p><h3 id="使用ReentrantLock对象实现线程通信-Condition"><a href="#使用ReentrantLock对象实现线程通信-Condition" class="headerlink" title="使用ReentrantLock对象实现线程通信(Condition)"></a>使用ReentrantLock对象实现线程通信(Condition)</h3><p>​    <strong>Condition的创建方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ReentrantLock reentrantLock=<span class="keyword">new</span> ReentrantLock();</span><br><span class="line">Condition condition=reentrantLock.newCondition();</span><br></pre></td></tr></table></figure><p>​    <strong>例子：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConditionDemo</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Lock lock=<span class="keyword">new</span> ReentrantLock();</span><br><span class="line"><span class="keyword">private</span> Condition condition=lock.newCondition();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">await</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">            System.out.println(<span class="string">"开始等待await！ ThreadName："</span> + Thread.currentThread().getName());</span><br><span class="line">condition.await();</span><br><span class="line">            System.out.println(<span class="string">"等待await结束！ ThreadName："</span> + Thread.currentThread().getName());</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">lock.unlock();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">signal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">lock.lock();</span><br><span class="line">        System.out.println(<span class="string">"发送通知signal！ ThreadName："</span> + Thread.currentThread().getName());</span><br><span class="line">        condition.signal();</span><br><span class="line">lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">ConditionDemo conditionDemo=<span class="keyword">new</span> ConditionDemo();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread(()-&gt;&#123;conditionDemo.await();&#125;,<span class="string">"t1"</span>).start();</span><br><span class="line">Thread.sleep(<span class="number">3000</span>);</span><br><span class="line"><span class="keyword">new</span> Thread(()-&gt;&#123;conditionDemo.signal();&#125;,<span class="string">"t2"</span>).start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="公平锁与非公平锁"><a href="#公平锁与非公平锁" class="headerlink" title="公平锁与非公平锁"></a>公平锁与非公平锁</h3><p>​    <strong>公平锁：</strong>线程之间获得锁是按顺序来分配的，即先到先得。</p><p>​    <strong>非公平锁：</strong>线程之间获得锁是随机的，即抢占资源，先到的不一定先拿到锁。</p><p>​    <strong>ReentrantLock</strong>提供了一种构造器获取这两种锁，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Public <span class="title">ReentrantLock</span><span class="params">(<span class="keyword">boolean</span> fair)</span></span>&#123;</span><br><span class="line">Sync=fair?<span class="keyword">new</span> FairSync():<span class="keyword">new</span> NonfairSync();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用-ReentrantReadWriteLock-实现并发"><a href="#使用-ReentrantReadWriteLock-实现并发" class="headerlink" title="使用 ReentrantReadWriteLock 实现并发"></a>使用 ReentrantReadWriteLock 实现并发</h3><p>​    ReentrantReadWriteLock为ReentrantLock的加强版，提供了两种锁，读锁与写锁，主要用于多线程并发。</p><p>​    读锁又为共享锁，写锁又为排他锁，也就是多个读锁之间不互斥，读锁与写锁互斥。多个线程可以同时进行读操作，但同一时刻只能有一个线程进行写操作。</p><p>读读共享：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReadReadDemo</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> ReentrantReadWriteLock lock=<span class="keyword">new</span> ReentrantReadWriteLock();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">lock.readLock().lock();</span><br><span class="line">System.out.println(<span class="string">"获得读锁"</span> + Thread.currentThread().getName()</span><br><span class="line">                + <span class="string">" 时间:"</span> + System.currentTimeMillis());</span><br><span class="line">        <span class="comment">//模拟读操作时间为5秒</span></span><br><span class="line">        Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        lock.readLock().unlock();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">ReadReadDemo readDemo=<span class="keyword">new</span> ReadReadDemo();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">readDemo.read();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;,<span class="string">"t1"</span>).start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">readDemo.read();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;,<span class="string">"t2"</span>).start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">运行结果：</span><br><span class="line">获得读锁t1 时间:<span class="number">1543494227504</span></span><br><span class="line">获得读锁t2 时间:<span class="number">1543494227505</span></span><br></pre></td></tr></table></figure><p>​    以上结果可以看到，几乎同时获得了锁。</p><h2 id="线程计数器（倒计时CountDownLatch与循环屏障CyclicBarrier）"><a href="#线程计数器（倒计时CountDownLatch与循环屏障CyclicBarrier）" class="headerlink" title="线程计数器（倒计时CountDownLatch与循环屏障CyclicBarrier）"></a>线程计数器（倒计时CountDownLatch与循环屏障CyclicBarrier）</h2><h3 id="倒计时CountDownLatch"><a href="#倒计时CountDownLatch" class="headerlink" title="倒计时CountDownLatch"></a>倒计时CountDownLatch</h3><p>​    允许一个或多个线程一直等待，知道其他的线程都完成操作再执行后续操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//倒计时</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CountDownLatchDemo</span></span>&#123;</span><br><span class="line"><span class="comment">//需要等待执行完毕的线程数量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> count=<span class="number">7</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> CountDownLatch countDownLatch=<span class="keyword">new</span> CountDownLatch(count);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=count;i++) &#123;</span><br><span class="line"><span class="keyword">int</span> index=i;</span><br><span class="line"><span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"第"</span> + index + <span class="string">"颗龙珠已收集到！"</span>);</span><br><span class="line">Thread.sleep(<span class="keyword">new</span> Random().nextInt(<span class="number">3000</span>));</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">countDownLatch.countDown();</span><br><span class="line">&#125;).start();</span><br><span class="line">&#125;</span><br><span class="line">countDownLatch.await();</span><br><span class="line">        System.out.println(<span class="string">"集齐七颗龙珠！召唤神龙！"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">运行结果：</span><br><span class="line">第<span class="number">1</span>颗龙珠已收集到！</span><br><span class="line">第<span class="number">2</span>颗龙珠已收集到！</span><br><span class="line">第<span class="number">3</span>颗龙珠已收集到！</span><br><span class="line">第<span class="number">4</span>颗龙珠已收集到！</span><br><span class="line">第<span class="number">5</span>颗龙珠已收集到！</span><br><span class="line">第<span class="number">6</span>颗龙珠已收集到！</span><br><span class="line">第<span class="number">7</span>颗龙珠已收集到！</span><br><span class="line">集齐七颗龙珠！召唤神龙！</span><br></pre></td></tr></table></figure><p>####CountDownLatch使用场景</p><ol><li><p>程序启动类要确保在用户请求前，需要加载的东西加载完成。</p></li><li><p>死锁检测：使用n个线程访问共享资源，在每次测试阶段线程数目是不同的，并尝试成生死锁。</p></li></ol><h3 id="CyclicBarrier循环屏障"><a href="#CyclicBarrier循环屏障" class="headerlink" title="CyclicBarrier循环屏障"></a>CyclicBarrier循环屏障</h3><p>​    比CountDownLatch更加强大，可以循环使用，让一组线程到达屏障点，只有所有线程都到达屏障点，才可以进行下一步操作，强调线程之间互相等待。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先召集七个法师，再去找龙珠，全部找到，召唤神龙</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CyclicBarrier1</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> count=<span class="number">7</span>;</span><br><span class="line"><span class="comment">//等待法师</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">CyclicBarrier magic=<span class="keyword">new</span> CyclicBarrier(count,<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"法师找齐，准备出发"</span>);</span><br><span class="line">summonDragon();</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//召集七位法师</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= count; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> index = i;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">"召集第"</span> + index + <span class="string">"个法师"</span>);</span><br><span class="line">                    magic.await();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException | BrokenBarrierException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//召唤神龙</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">summonDragon</span><span class="params">()</span> </span>&#123;</span><br><span class="line">CyclicBarrier dragon=<span class="keyword">new</span> CyclicBarrier(count,<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"召唤神龙"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//收集7颗龙珠</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= count; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> index = i;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">"第"</span> + index + <span class="string">"颗龙珠已收集到！"</span>);</span><br><span class="line">                    dragon.await();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException | BrokenBarrierException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">运行结果：</span><br><span class="line">召集第<span class="number">2</span>个法师</span><br><span class="line">召集第<span class="number">6</span>个法师</span><br><span class="line">召集第<span class="number">7</span>个法师</span><br><span class="line">召集第<span class="number">5</span>个法师</span><br><span class="line">召集第<span class="number">4</span>个法师</span><br><span class="line">召集第<span class="number">3</span>个法师</span><br><span class="line">召集第<span class="number">1</span>个法师</span><br><span class="line">法师找齐，准备出发</span><br><span class="line">第<span class="number">1</span>颗龙珠已收集到！</span><br><span class="line">第<span class="number">2</span>颗龙珠已收集到！</span><br><span class="line">第<span class="number">3</span>颗龙珠已收集到！</span><br><span class="line">第<span class="number">4</span>颗龙珠已收集到！</span><br><span class="line">第<span class="number">5</span>颗龙珠已收集到！</span><br><span class="line">第<span class="number">6</span>颗龙珠已收集到！</span><br><span class="line">第<span class="number">7</span>颗龙珠已收集到！</span><br><span class="line">召唤神龙</span><br></pre></td></tr></table></figure><p>​    注：上面的例子说明了屏障，循环可以使用CyclicBarrier.reset()，重置循环屏障的线程数。</p><h2 id="CountDownLatch与CyclicBarrier区别"><a href="#CountDownLatch与CyclicBarrier区别" class="headerlink" title="CountDownLatch与CyclicBarrier区别"></a>CountDownLatch与CyclicBarrier区别</h2><ol><li><p>CountDownLatch计数器只能使用一次，CyclicBarrier可以重复使用（rest（）），所以 CyclicBarrier 能处理更为复杂的业务场景，比如如果计算发生错误，可以重置计数器，并让线程们重新执行一次。 </p></li><li><p>CyclicBarrier可以通过getNumberWaiting获取当前阻塞的线程数量，等其他方法。</p></li><li><p>CountDownLatch会阻塞主线程，CyclicBarrier不会阻塞主线程，只会阻塞子线程。</p></li></ol><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><pre><code>与连接池类似，负责管理线程，即为了避免系统频繁的创建和销毁线程，我们可以将创建的线程进行复用。</code></pre><h3 id="使用线程池的好处"><a href="#使用线程池的好处" class="headerlink" title="使用线程池的好处"></a>使用线程池的好处</h3><ol><li><p>降低资源的消耗。通过重复利用来降低线程创建与销毁锁带来的资源消耗。</p></li><li><p>提高响应速度。任务到达的时候，可以不用等待线程的创建，直接从线程池拿。</p></li><li><p>提高线程的管理性，线程是稀缺资源，线程池创建大量线程，需要对他进行管理，可以进行统一分配、调优和监控。</p></li></ol><h2 id="未完待续…………"><a href="#未完待续…………" class="headerlink" title="未完待续…………"></a>未完待续…………</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>IDEA基于Maven搭建ssm框架</title>
      <link href="/2018/11/24/IDEA%E5%9F%BA%E4%BA%8EMaven%E6%90%AD%E5%BB%BAssm%E6%A1%86%E6%9E%B6/"/>
      <url>/2018/11/24/IDEA%E5%9F%BA%E4%BA%8EMaven%E6%90%AD%E5%BB%BAssm%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="IDEA基于Maven搭建ssm框架"><a href="#IDEA基于Maven搭建ssm框架" class="headerlink" title="IDEA基于Maven搭建ssm框架"></a>IDEA基于Maven搭建ssm框架</h1><p>​    用于记录个人搭建过程的复习与问题记录，从基础环境、整体流程、搭建步骤、问题记录这四个方面来写这篇博客。</p><ol><li><p>基础环境</p><p>java：1.8.0_181</p><p>Ide：IDEA</p><p>数据库：mysql 5.1.29</p></li><li><p>整体流程</p><ol><li>新建一个maven项目，在pom.xml中添加依赖，主要是将项目所用到的jar包引入到项目，通过Maven进行管理。</li><li>进行各种配置，web.xml、spring、springmvc、mybatis等等，具体的下面介绍。</li><li>添加Web服务器Tomcat。</li><li>启动Tomcat，访问localhost:8080，页面成功访问，即ssm框架搭建完成。</li></ol></li></ol><a id="more"></a><ol start="3"><li><p>搭建步骤</p><ol><li><p>创建maven工程</p><ol><li><p>步骤一：File-&gt;Project-&gt;选择Maven-&gt;勾选Create from archetype 并选择webapp-&gt;next填写GroupId与ArtifactId</p><p>注：GroupID 是项目组织唯一的标识符，实际对应JAVA的包的结构，是main目录里java的目录结构。ArtifactID是项目的唯一的标识符，实际对应项目的名称，就是项目根目录的名称。</p><p><img src="https://bmob-cdn-22543.b0.upaiyun.com/2018/11/24/cbe97d6640d6b919804fb2b71d22f853.png" alt="image-20181124220223649"></p><p><img src="https://bmob-cdn-22543.b0.upaiyun.com/2018/11/24/e2deaa2340b54d7b806919227891deb2.png" alt="image-20181124220318077"></p></li><li><p>步骤二：完善目录结构，默认src下面没有java和resources文件夹与test</p><p>main -&gt; New -&gt; Directory ==&gt; 创建 java</p><p>main -&gt; New -&gt; Directory ==&gt; 创建 resources</p><p>src -&gt; New -&gt; Directory ==&gt; 创建 test</p><p>test -&gt; New -&gt; Directory ==&gt; 创建 java</p><p>test -&gt; New -&gt; Directory ==&gt; 创建 resources</p><p>​    <strong>对创建好的java、resources、test/java、test/resources目录均右键选择 Mark Diretory as，然后分别进行如下操作：</strong></p><p>java -&gt; Sources Root //java源码根目录</p><p>resources -&gt; Resources Root//java 配置文件目录</p><p>test/java -&gt; Test Sources Root//java 测试源码目录</p><p>test/java -&gt; Test Sources Root//java 测试配置文件目录</p><p>​    <strong>结果如下图所示：</strong></p><p><img src="https://bmob-cdn-22543.b0.upaiyun.com/2018/11/24/d1eab17a40683b59807d11ea7a28fd84.png" alt="image-20181124220730115"></p><p>总结：到此maven工程创建完毕，以下为需要了解的知识。</p><p><strong>如何查看 Maven 的本地仓库？</strong></p><p>在配置之前，我们需先了解下 Maven 仓库。</p><p>​    Maven 仓库是 Maven 管理 jar 包的地方，有本地仓库，远程仓库和中央仓库之分。本地仓库即存在于本机。远程仓库，可通过配置 settings.xml 获取，比如阿里云的远程仓库。中央仓库为 Maven 的仓库，不配置远程仓库，默认从中央仓库下载 jar 依赖，然而中央仓库在国外，下载起来速度会很慢，所以我们多会选择配置阿里云远程仓库。</p><p><strong>如何查看 Maven 本地仓库的位置，具体步骤如下：</strong></p><p>​    首先，打开 CMD 命令窗口，输入如下 Maven 命令，即可查看 Maven 本地仓库的位置。</p><p>​    <strong>mvn help:effective-settings</strong></p><p>​    如果没有配置 Maven 本地仓库的位置，默认位置在 C:\Users\你的主机名.m2\repository 下，如图：</p><p><img src="https://bmob-cdn-22543.b0.upaiyun.com/2018/11/24/f42aafdb400a8f8a80ba67d13e1ddf0d.png" alt="image-20181124221003074"></p></li></ol></li><li><p>配置文件</p><ol><li><p>添加pom.xml依赖（我之前用的版本，不同环境可能版本会有冲突，具体问题具体分析）</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line">&lt;properties&gt;</span><br><span class="line">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">        &lt;maven.compiler.source&gt;1.7&lt;/maven.compiler.source&gt;</span><br><span class="line">        &lt;maven.compiler.target&gt;1.7&lt;/maven.compiler.target&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- spring版本号 --&gt;</span><br><span class="line">        &lt;spring.version&gt;4.2.5.RELEASE&lt;/spring.version&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- mybatis版本号 --&gt;</span><br><span class="line">        &lt;mybatis.version&gt;3.2.8&lt;/mybatis.version&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- mysql驱动版本号 --&gt;</span><br><span class="line">        &lt;mysql-driver.version&gt;5.1.29&lt;/mysql-driver.version&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- log4j日志包版本号 --&gt;</span><br><span class="line">        &lt;slf4j.version&gt;1.7.18&lt;/slf4j.version&gt;</span><br><span class="line">        &lt;log4j.version&gt;1.2.17&lt;/log4j.version&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--spring-security版本号--&gt;</span><br><span class="line">        &lt;spring-security.version&gt;4.1.3.RELEASE&lt;/spring-security.version&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--spring-data-redis版本号--&gt;</span><br><span class="line"> &lt;spring.data.redis.version&gt;1.7.1.RELEASE&lt;/spring.data.redis.version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;!-- 添加jstl依赖 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;jstl&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;jstl&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.2&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;javax&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;javaee-api&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;7.0&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 添加spring核心依赖 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-core&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-web&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-oxm&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-tx&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-context-support&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-aop&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 添加mybatis依赖 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;mybatis.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 添加mybatis/spring整合包依赖 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.2.2&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 添加mysql驱动依赖 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;mysql-driver.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- 添加数据库连接池依赖 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;commons-dbcp&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;commons-dbcp&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.2.2&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 添加日志相关jar包 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;log4j&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;log4j&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;log4j.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;slf4j.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;slf4j.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- log end --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-jms&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- https:<span class="comment">//mvnrepository.com/artifact/org.apache.xbean/xbean-spring --&gt;</span></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.xbean&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;xbean-spring&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;4.0&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- https:<span class="comment">//mvnrepository.com/artifact/commons-beanutils/commons-beanutils --&gt;</span></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;commons-beanutils&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;commons-beanutils&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.9.3&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- 通用mapper --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;tk.mybatis&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mapper&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.1.2&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><p>如下图所示：</p><p><img src="https://bmob-cdn-22543.b0.upaiyun.com/2018/11/24/edcea70540365e2c80294c57a6017bc9.png" alt="image-20181124221541465"></p></li><li><p>创建所需要的配置文件，如图所示。</p><p>配置文件：</p><p><strong>mybatisConfig.xml：用于配置mybatis。</strong></p><p><strong>applicationContext-dao：用于配置spring与dao层的整合。</strong></p><p><strong>applicationContext-service：用于配置spring与service层的整合。</strong></p><p><strong>applicationContext-transaction：用于配置事务处理。</strong></p><p><strong>Springmvc-dispatcher-servlet：用于配置springmvc所需要的模块（前端控制器DispatcherServlet等）</strong></p><p>资源文件：</p><p>​      <strong>Jdbc.properties：用于连接数据库。</strong></p><p>​      <strong>Log4j.properties：用于配置日志。</strong></p><p><img src="https://bmob-cdn-22543.b0.upaiyun.com/2018/11/24/536582d640562a2480825b66dbeadb6c.png" alt="image-20181124221730312"></p></li><li><p>配置文件内容</p><ol><li><p>applicationContext-dao.xml</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">       xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">       xmlns:context=<span class="string">"http://www.springframework.org/schema/context"</span></span><br><span class="line">       xmlns:mvc=<span class="string">"http://www.springframework.org/schema/mvc"</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">"</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/context</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/mvc</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 加载数据库连接参数 --&gt;</span><br><span class="line">    &lt;context:property-placeholder location=<span class="string">"classpath:jdbc.properties"</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 数据库连接池 --&gt;</span><br><span class="line">    &lt;bean id=<span class="string">"dataSource"</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span></span><br><span class="line">        destroy-method=<span class="string">"close"</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">"driverClassName"</span> value=<span class="string">"$&#123;jdbc.driverClass&#125;"</span> /&gt;</span><br><span class="line">        &lt;property name=<span class="string">"url"</span> value=<span class="string">"$&#123;jdbc.url&#125;"</span> /&gt;</span><br><span class="line">        &lt;property name=<span class="string">"username"</span> value=<span class="string">"$&#123;jdbc.username&#125;"</span> /&gt;</span><br><span class="line">        &lt;property name=<span class="string">"password"</span> value=<span class="string">"$&#123;jdbc.password&#125;"</span> /&gt;</span><br><span class="line">        &lt;!-- 初始化连接大小 --&gt;</span><br><span class="line">        &lt;property name=<span class="string">"initialSize"</span> value=<span class="string">"$&#123;initialSize&#125;"</span>/&gt;</span><br><span class="line">        &lt;!-- 连接池最大数量 --&gt;</span><br><span class="line">        &lt;property name=<span class="string">"maxActive"</span> value=<span class="string">"$&#123;maxActive&#125;"</span>/&gt;</span><br><span class="line">        &lt;!-- 连接池最大空闲 --&gt;</span><br><span class="line">        &lt;property name=<span class="string">"maxIdle"</span> value=<span class="string">"$&#123;maxIdle&#125;"</span>/&gt;</span><br><span class="line">        &lt;!-- 连接池最小空闲 --&gt;</span><br><span class="line">        &lt;property name=<span class="string">"minIdle"</span> value=<span class="string">"$&#123;minIdle&#125;"</span>/&gt;</span><br><span class="line">        &lt;!-- 获取连接最大等待时间 --&gt;</span><br><span class="line">        &lt;property name=<span class="string">"maxWait"</span> value=<span class="string">"$&#123;maxWait&#125;"</span>/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- mybatis的SqlSessionFactory交给spring管理 --&gt;</span><br><span class="line">    &lt;bean id=<span class="string">"sqlSessionFactory"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">"configLocation"</span> value=<span class="string">"classpath:mybatis/mybatisConfig.xml"</span>/&gt;</span><br><span class="line">        &lt;property name=<span class="string">"dataSource"</span> ref=<span class="string">"dataSource"</span>/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- mapper批量扫描 --&gt;</span><br><span class="line">    &lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">"basePackage"</span> value=<span class="string">"vip.godf.blog.ssm.model.mapper"</span>/&gt;</span><br><span class="line">        &lt;property name=<span class="string">"sqlSessionFactoryBeanName"</span> value=<span class="string">"sqlSessionFactory"</span>/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></li><li><p>applicationContext-service.xml</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">       xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">       xmlns:context=<span class="string">"http://www.springframework.org/schema/context"</span></span><br><span class="line">       xmlns:mvc=<span class="string">"http://www.springframework.org/schema/mvc"</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">"</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/context</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/mvc</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--&lt;bean id=<span class="string">""</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">""</span>/&gt;--&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></li><li><p>applicationContext-transaction.xml（aop暂时没用上，所以我注释掉了）</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">       xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">       xmlns:context=<span class="string">"http://www.springframework.org/schema/context"</span></span><br><span class="line">       xmlns:mvc=<span class="string">"http://www.springframework.org/schema/mvc"</span></span><br><span class="line">       xmlns:tx=<span class="string">"http://www.springframework.org/schema/tx"</span></span><br><span class="line">       xmlns:aop=<span class="string">"http://www.springframework.org/schema/aop"</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">"</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/context</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/mvc</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/tx</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/tx/spring-tx.xsd</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/aop</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/aop/spring-aop.xsd</span></span><br><span class="line"><span class="string">        "</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;<span class="keyword">import</span> resource=<span class="string">"classpath:spring/applicationContext-dao.xml"</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--&lt;bean id=<span class="string">"transactionManager"</span>--&gt;</span><br><span class="line">          &lt;!--<span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;--&gt;</span><br><span class="line">        &lt;!--&lt;property name=<span class="string">"dataSource"</span> ref=<span class="string">"dataSource"</span>/&gt;--&gt;</span><br><span class="line">    &lt;!--&lt;/bean&gt;--&gt;</span><br><span class="line">    &lt;!--&amp;lt;!&amp;ndash; 通知 &amp;ndash;&amp;gt;--&gt;</span><br><span class="line">    &lt;!--&lt;tx:advice id=<span class="string">"txAdvice"</span>--&gt;</span><br><span class="line">               &lt;!--transaction-manager=<span class="string">"transactionManager"</span>&gt;--&gt;</span><br><span class="line">        &lt;!--&lt;tx:attributes&gt;--&gt;</span><br><span class="line">            &lt;!--&lt;tx:method name=<span class="string">"save*"</span> propagation=<span class="string">"REQUIRED"</span>/&gt;--&gt;</span><br><span class="line">            &lt;!--&lt;tx:method name=<span class="string">"delete*"</span> propagation=<span class="string">"REQUIRED"</span>/&gt;--&gt;</span><br><span class="line">            &lt;!--&lt;tx:method name=<span class="string">"update*"</span> propagation=<span class="string">"REQUIRED"</span>/&gt;--&gt;</span><br><span class="line">            &lt;!--&lt;tx:method name=<span class="string">"insert*"</span> propagation=<span class="string">"REQUIRED"</span>/&gt;--&gt;</span><br><span class="line">            &lt;!--&lt;tx:method name=<span class="string">"select*"</span> propagation=<span class="string">"SUPPORTS"</span>--&gt;</span><br><span class="line">                       &lt;!--read-only=<span class="string">"true"</span>/&gt;--&gt;</span><br><span class="line">        &lt;!--&lt;/tx:attributes&gt;--&gt;</span><br><span class="line">    &lt;!--&lt;/tx:advice&gt;--&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--&amp;lt;!&amp;ndash; aop &amp;ndash;&amp;gt;--&gt;</span><br><span class="line">    &lt;!--&lt;aop:config&gt;--&gt;</span><br><span class="line">        &lt;!--&lt;aop:advisor advice-ref=<span class="string">"txAdvice"</span>--&gt;</span><br><span class="line">                     &lt;!--pointcut=<span class="string">"execution(* vip.godf.blog.ssm.model.service.serviceImpl.*.*(..))"</span>/&gt;--&gt;</span><br><span class="line">    &lt;!--&lt;/aop:config&gt;--&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=<span class="string">"transactionManager"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">"dataSource"</span> ref=<span class="string">"dataSource"</span>/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;tx:annotation-driven transaction-manager=<span class="string">"transactionManager"</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></li><li><p>mybatisConfig.xml</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"ISO-8859-1"</span>?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 别名 --&gt;</span><br><span class="line">    &lt;typeAliases&gt;</span><br><span class="line">        &lt;<span class="keyword">package</span> name=<span class="string">"vip.godf.ssm.model.mapper"</span>/&gt;</span><br><span class="line">    &lt;/typeAliases&gt;</span><br><span class="line"></span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></li><li><p>Web.xml</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE web-app PUBLIC</span><br><span class="line">        <span class="string">"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"</span></span><br><span class="line">        <span class="string">"http://java.sun.com/dtd/web-app_2_3.dtd"</span> &gt;</span><br><span class="line"></span><br><span class="line">&lt;web-app&gt;</span><br><span class="line">    &lt;display-name&gt;Archetype Created Web Application&lt;/display-name&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;context-param&gt;</span><br><span class="line">        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class="line">        &lt;param-value&gt;classpath*:spring/applicationContext-*.xml&lt;/param-value&gt;</span><br><span class="line">    &lt;/context-param&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;context-param&gt;</span><br><span class="line">        &lt;param-name&gt;log4jConfigLocation&lt;/param-name&gt;</span><br><span class="line">        &lt;param-value&gt;classpath:log4j.properties&lt;/param-value&gt;</span><br><span class="line">    &lt;/context-param&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 编码过滤器 解决POST乱码问题--&gt;</span><br><span class="line">    &lt;filter&gt;</span><br><span class="line">        &lt;filter-name&gt;encodingFilter&lt;/filter-name&gt;</span><br><span class="line">        &lt;filter-<span class="class"><span class="keyword">class</span>&gt;<span class="title">org</span>.<span class="title">springframework</span>.<span class="title">web</span>.<span class="title">filter</span>.<span class="title">CharacterEncodingFilter</span>&lt;/<span class="title">filter</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">init</span>-<span class="title">param</span>&gt;</span></span><br><span class="line"><span class="class">            &lt;<span class="title">param</span>-<span class="title">name</span>&gt;<span class="title">encoding</span>&lt;/<span class="title">param</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">            &lt;<span class="title">param</span>-<span class="title">value</span>&gt;<span class="title">UTF</span>-8&lt;/<span class="title">param</span>-<span class="title">value</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;/<span class="title">init</span>-<span class="title">param</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">filter</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">filter</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">filter</span>-<span class="title">name</span>&gt;<span class="title">encodingFilter</span>&lt;/<span class="title">filter</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">url</span>-<span class="title">pattern</span>&gt;//*&lt;/<span class="title">url</span>-<span class="title">pattern</span>&gt;  //这边是/* <span class="title">markdown</span>格式问题，/*下面都被注释了看着不舒服。</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">filter</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    &lt;!-- <span class="title">spring</span>监听器 --&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">listener</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">listener</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="title">org</span>.<span class="title">springframework</span>.<span class="title">web</span>.<span class="title">context</span>.<span class="title">ContextLoaderListener</span></span></span><br><span class="line"><span class="class">        &lt;/<span class="title">listener</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">listener</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    &lt;!-- 防止<span class="title">spring</span>内存溢出监听器，比如<span class="title">quartz</span> --&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">listener</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">listener</span>-<span class="title">class</span>&gt;<span class="title">org</span>.<span class="title">springframework</span>.<span class="title">web</span>.<span class="title">util</span>.<span class="title">IntrospectorCleanupListener</span>&lt;/<span class="title">listener</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">listener</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    &lt;!-- <span class="title">spring</span> <span class="title">mvc</span> <span class="title">servlet</span>--&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">servlet</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">servlet</span>-<span class="title">name</span>&gt;<span class="title">SpringMVC</span>&lt;/<span class="title">servlet</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">servlet</span>-<span class="title">class</span>&gt;<span class="title">org</span>.<span class="title">springframework</span>.<span class="title">web</span>.<span class="title">servlet</span>.<span class="title">DispatcherServlet</span>&lt;/<span class="title">servlet</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">init</span>-<span class="title">param</span>&gt;</span></span><br><span class="line"><span class="class">            &lt;<span class="title">param</span>-<span class="title">name</span>&gt;<span class="title">contextConfigLocation</span>&lt;/<span class="title">param</span>-<span class="title">name</span>&gt;</span></span><br><span class="line">            &lt;param-value&gt;classpath:springmvc/springmvc-dispatcher-servlet.xml&lt;/param-value&gt;</span><br><span class="line">        &lt;/init-param&gt;</span><br><span class="line">        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</span><br><span class="line">    &lt;/servlet&gt;</span><br><span class="line">    &lt;!-- servlet-mapping --&gt;</span><br><span class="line">    &lt;servlet-mapping&gt;</span><br><span class="line">        &lt;servlet-name&gt;SpringMVC&lt;/servlet-name&gt;</span><br><span class="line">        &lt;!-- 此处也可以配置成 *.<span class="keyword">do</span> 形式 --&gt;</span><br><span class="line">        &lt;url-pattern&gt;/&lt;/url-pattern&gt;</span><br><span class="line">    &lt;/servlet-mapping&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 指明对于如下资源文件不采用spring的过滤器 --&gt;</span><br><span class="line">    &lt;servlet-mapping&gt;</span><br><span class="line">        &lt;servlet-name&gt;default&lt;/servlet-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;*.xml&lt;/url-pattern&gt;</span><br><span class="line">    &lt;/servlet-mapping&gt;</span><br><span class="line">    &lt;servlet-mapping&gt;</span><br><span class="line">        &lt;servlet-name&gt;default&lt;/servlet-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;*.css&lt;/url-pattern&gt;</span><br><span class="line">    &lt;/servlet-mapping&gt;</span><br><span class="line"></span><br><span class="line">    &lt;welcome-file-list&gt;</span><br><span class="line">        &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;</span><br><span class="line">    &lt;/welcome-file-list&gt;</span><br><span class="line"></span><br><span class="line">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure></li></ol></li></ol></li><li><p>Tomcat配置就不写了。</p></li><li><p>搭建完成启动tomcat，输入localhost:8080显示如下页面，即表示搭建成功。</p><p><img src="https://bmob-cdn-22543.b0.upaiyun.com/2018/11/24/7016db25407bf36080ccedb320f95ef8.png" alt="image-20181124222445325"></p></li></ol></li><li><p>问题记录</p><p>这边主要就一个问题，即maven的依赖包问题。</p><p>问题：Inspection info: Inspects a Maven model for resolution problems.</p><p>解决办法：</p><ol><li><p>maven没有下载依赖包到仓库中，右键pom.xml-&gt;maven-&gt;download sources and documentation</p><p><img src="https://bmob-cdn-22543.b0.upaiyun.com/2018/11/24/b6c8d55340c52f3180c430ddead9215b.png" alt="image-20181124222852371"></p></li><li><p>maven没有完全加载，右键pom.xml-&gt;maven-&gt;Reimport</p></li><li><p>由于之前下载maven网络中断，导致依赖包不完整，删除仓库中的依赖包，重新下载。（前面有提到怎么找仓库，删除重新下载即可）</p></li></ol></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 复习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>第一篇文章</title>
      <link href="/2018/10/30/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/2018/10/30/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/10/27/hello-world/"/>
      <url>/2018/10/27/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
  
  
</search>
